% !TEX root = /Users/cmerlo//cs1textbook/cs1textbook.tex

\chapter{Classes}
\label{chapter:classes}

\minitoc

\section{Built-In Data Types}

The Java language provides a few ways to represent data.  In Chapter \ref{chapter:info-numbers} we learned a couple of the ways Java allows us to store numbers.  Truth values were discussed in Chapter \ref{chapter:if}.  Then, in Chapter \ref{chapter:char}, we learned how to store characters and strings.  But, as they said on Sesame Street, one of these things is not like the others.

\subsection{Primitive Data Types}

In Section \ref{section:string}, it was noted that the data types \mintinline{java}{int}, \mintinline{java}{double}, \mintinline{java}{boolean}, and \mintinline{java}{char} are \textbf{primitive data types}\index{Primitive Data Types}, without defining the term.  For now, we will define a variable of a primitive data type as one that stores a value directly, but this won't mean much until we explore the other kind of data type.

\subsection{Classes Are Also Data Types}
We also learned in \ref{section:string} that the \mintinline{java}{String} data type is part of the Java language.  \mintinline{java}{String} is also the name of a Java class.  A \textbf{class} serves as a data type in Java, and in this chapter we will explore how to create our own data types.

Java programmers use the word \textit{class} to describe a group of objects with similar characterisics or uses; for instance, acoustic 12-string guitars are one class of musical instruments, and wide receivers are one class of football players.  When we define a class, we specify what objects of that class will be like, and we explain what sort of tasks these objects will be able to perform.

\begin{defn}{Class}
    A \textbf{class}\index{Class!Definition} is a Java data type.  We programmers can create our own data types by defining our own classes.  A typical Java class defines the \textit{properties} and \textit{behaviors} of the variables of this type that will be created.
\end{defn}

Throughout this Part of the book, we will be developing an application as a case study.  Specifically, we will be designing a program that children can use to draw geometric shapes on the screen, and learn about some of these shapes' important characteristics like area, perimeter, volume, etc.

\section{Writing The \mintinline{java}{Point} Class}

We will begin our geometry case study by creating a data type to represent the smallest unit of geometry -- the point -- and build up in complexity from there.  \href{https://en.wiktionary.org/wiki/point}{Wiktionary defines a geometrical point} as ``A zero-dimensional mathematical object representing a location in one or more dimensions; something considered to have position but no magnitude or direction''.  We will define our \mintinline{java}{Point} class to represent an object on a two-dimensional Cartesian plane, since this is a good analogy for a computer screen.  A detail that will become important later is that several computer graphics paradigms, including the one we'll be working under later, fix the origin of the screen's Cartesian plane at the top left of the screen, so that $x$ values increase from right to left and $y$ values increase from the top of the screen to the bottom.  A monitor with 1024$\times$768 resolution, therefore, would find the point $(1024,768)$ at the bottom right of the screen, as in Figure \ref{fig:monitor}.

\begin{figure}[ht]
    \color{nccblue}
    \begin{center}
        \begin{tikzpicture}
            \draw [thick,nccblue,fill=nccorange] (0,0) -- (5,0) -- (5,4) -- (0,4) -- (0,0) {};
            \draw [thin,nccblue] (1,0) -- (0.5,-0.5) -- (4.5,-0.5) -- (4,0);

            \draw (5,0) node [circle,fill=nccblue] {};
            \draw (0,4) node [circle,fill=nccblue] {};

            \draw (-0.5,3.65) node {$(0,0)$};
            \draw (6,0.3) node {$(1024,768)$};
        \end{tikzpicture}
    \end{center}
    \caption{Cartesian Coordinates of a Computer Monitor with 1024$\times$768 Resolution}
    \label{fig:monitor}
\end{figure}

\subsection{Class Header}

Every class definition begins with a class \textit{header}.  The header defines the class' visibility and its name.  This is how a simple class header looks:

\begin{javaformat}{Class Header}
\begin{minted}{text}
<visibility-modifier> class <identifier>
\end{minted}
\end{javaformat}

The visibility modifier for classes will be \mintinline{java}{public} throughout this textbook.

In Section \ref{sec:using-memory} we learned some rules that Java imposes on us regarding what we can choose as an identifier:
\bi
\item An identifier \textbf{must} start with a letter.
\item An identifier \textbf{must} only contain letters, digits, and the underscore character (\lstinline{'_'}).
\item An identifier \textbf{must not} be the same as a \textit{reserved word} in Java (like \lstinline{class} or \lstinline{static}).
\ei

Section \ref{sec:using-memory} also lists some guidelines regarding naming a variable.  The guidelines for naming a class are a bit different, however:
\bi
\item The name of a class should \textit{start with a capital letter}.
\item Classes define \textit{things}, so the name should be a \textit{noun}.
\ei

For the \mintinline{java}{Point} class, the header will look like the first line of this code:

\begin{minted}{java}
public class Point {  // This line is the header
    /* The body of the class will go here */
}
\end{minted}

Notice that I have put the opening curly brace of the body at the end of the header.  Some programmers choose instead to place an opening curly brace on the next line.

\subsection{Instance Variables}

After the class header, the rest of the class' definition -- the \textit{body} of the class -- appear inside curly braces.  The first thing that most programmers put at the top of the class' body is a list of the class' \textit{properties}.  This list consists of variable declarations that describe the data an object of this class will contain.

One instance of the \mintinline{java}{Point} class should contain enough information to complete an ordered pair in $(x,y)$ format.  We'll assume some knowledge about computer monitors -- specifically, that there are no partial pixels -- and specify that both the $x$ value and the $y$ value must be integers.

\begin{minted}{java}
public class Point {
    int x;  // x component of Cartesian ordered pair
    int y;  // y component of Cartesian ordered pair
}
\end{minted}

Variables like these, declared in class scope, are called \textbf{instance variables}\index{Variable!Instance variable}, because every instance of the \mintinline{java}{Point} class that we create will store values in these variables.

In a different class, we will create a \mintinline{java}{Point} object and place some data in these instance variables:

\begin{minted}{java}
public class TestPoint {
    public static void main( String args[] ) {
        Point p1 = new Point();  // p1 represents a point on the screen
        p1.x = 10;   // p1's x coordinate is now 10
        p1.y = 15;   // p1's y coordinate is now 15

        System.out.println( "The point is at (" + p1.x + "x" + p1.y + ")." );
    }
}
\end{minted}

So far, it seems like we've solved our problem.  The output from this program will be what you expect: \texttt{The point is at (10x15).}  There exists, however, a new problem, illustrated here:

\begin{minted}{java}
public class TestPoint {
    public static void main( String args[] ) {
        Point p1 = new Point();  // p1 should represent a point on the screen
        p1.x = -35;   // But can p1's x coordinate be negative?
        p1.y = -17;   // Or its y coordinate?
    }
}
\end{minted}

What happens here might surprise you.  We human readers of the English language know that a point on the screen isn't supposed to have negative values, but the Java compiler doesn't understand English.  Java \textit{will not} interpret this as an error, because to Java it isn't an error.  It's a \textit{semantic error}, because we know it's wrong, but it doesn't violate the rules of the Java language, so it will run and be wrong.

\begin{defn}{Semantic Error}
    A \textbf{semantic error}\index{Error!Semantic error} is an error in logic or meaning.  Typically, we notice semantic errors in code that has compiled and is running, because only a program that's running can generate incorrect output.
\end{defn}

\subsection{Visibility}

Thus, we learn the most important responsibility of Java programmers: We must protect the data in our classes, because relying on others to do the right thing will not work.

\begin{tip}{Data Protection}
    When designing a Java class, you must ensure that the data in its instance variables will always be valid.  If you don't work to ensure this, then there will come a point where the data will become invalid.
\end{tip}

The path to ensuring data validity starts with changing the \textit{visibility} of the instance variables.  We will mark \mintinline{java}{x} and \mintinline{java}{y} as \mintinline{java}{private}, like this:

\begin{minted}{java}
public class Point {
    private int x;  // x component of Cartesian ordered pair
    private int y;  // y component of Cartesian ordered pair
}
\end{minted}

The value of a \mintinline{java}{private} variable can not be retrieved or changed by any code outside the class.  This protects our data from being made negative by the \mintinline{java}{TestPoint} class:

\begin{minted}{java}
public class TestPoint {
    public static void main( String args[] ) {
        Point p1 = new Point();  // p1 should represent a point on the screen
        p1.x = -35;   // This is now a syntax error!
        p1.y = -17;   // And so is this!  Success!
    }
}
\end{minted}

But we have now done too good a job of protecting our data, because we can't set the variables with good data.  We can't even print their values!

\begin{minted}{java}
public class TestPoint {
    public static void main( String args[] ) {
        Point p1 = new Point();  // p1 represents a point on the screen
        p1.x = 10;   // This seemingly-valid request is now a syntax error
        p1.y = 15;   // So is this

        // And we can't even do this any more:
        System.out.println( "The point is at (" + p1.x + "x" + p1.y + ")." );
    }
}
\end{minted}

The instance variables still need to be \mintinline{java}{private}; the way to fix this problem is to give limited \mintinline{java}{public} access to viewing and changing the instance variables' values.

\section{Constructors}

The reason that the code \mintinline{java}{Point p1 = new Point();} looks like a method call is because it \textit{is} a method call.  When we use \mintinline{java}{new} in this way to instantate an object, the Java interpreter calls a method called a \textit{constructor}.

\begin{defn}{Constructor}
    A \textbf{constructor}\index{Methods!Constructors} is a special method in a class that runs automatically when an instance of that class is created.
\end{defn}

There are two very important things to know about constructors, that violate previous rules and guidelines about methods in general:
\bi
\item The name of the constructor method must be exactly the same as the name of the class.
\item Constructor methods do not have a return type; not even \mintinline{java}{void}.
\ei

When you write a class, it is your responsibility to ensure that the data stored in the instance variables are always valid.  This responsibility begins at the moment an object of the class is created.  Therefore, every constructor we write must ensure that every instance variable is initialized with valid data values.

\begin{tip}{Constructors}
    Make sure that every constructor you ever write initializes all the class' instance variables with valid data values.
\end{tip}

\subsection{Default Constructors}

There are two basic kinds of constructors.  We will be discussing \textit{parameterized constructors} in Section $X$, but this discussion will focus on \textit{default constructors}.  A \textbf{default constructor}\index{Methods!Constructors!Default constructors} is simply a constructor with an empty parameter list.  When you visit a new pizza place for the first time, and you aren't aware of what exotic toppings or crust styles they may have available, you might choose the default option -- ``I'll take one regular slice, please.''\footnote{This is virually always the right choice where I live; your mileage may vary, especially as you travel farther from New York City.}  When another programmer wants to instantiate your class, but isn't aware of what options exist, he or she will likely choose the default option as well, by calling your default constructor.

And so, when designing a new class, one of your responsibilities is to determine what will serve as good default values for your class.  The pizza chef will probably choose a white flour crust, tomato sauce, and mozzarella cheese.  For the point class, we might choose the one pixel we can guarantee exists -- the top left corner, $(0,0)$.

With all those details in place, we can finally write the \mintinline{java}{Point} class' default constructor:

\begin{minted}{java}
public class Point {
    private int x;  // x component of Cartesian ordered pair
    private int y;  // y component of Cartesian ordered pair

    // Default constructor
    public Point() {
        x = 0;
        y = 0;
    }
}
\end{minted}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Reference Variables}
\label{section:reference-variables}

In Section \ref{section:string} we learned that a variable of type \mintinline{java}{String} must be \textit{instantiated} using code like \mintinline{java}{String s1 = new String( "Hello world!" );}.  The way this \mintinline{java}{String} is stored, however, is quite different from how an integer is stored.  The value is not directly stored in the variable.  Consider this code:

\begin{minted}{java}
int x1 = 15;
String s1 = new String( "Hello world!" );
\end{minted}

Figure \ref{fig:reference-variable} shows how the values are stored.

\begin{figure}[ht]
    \begin{center}
        \sffamily
        \begin{subfigure}{0.2\textwidth}
            \begin{center}
                \begin{tikzpicture}[var/.style={draw=nccblue,fill=nccorange,text=white,minimum width = width{"Hello world!"}, minimum height=1.25pt,inner sep=2pt,outer sep=2pt}]
                    \node (x1) [var] {15};
                    \node [above = 2mm of x1] {x1};
                \end{tikzpicture}
        \end{center}
            \caption{\mintinline{java}{int x1 = 15;}}
        \end{subfigure}%
        \begin{subfigure}{0.4\textwidth}
            \begin{center}
                \begin{tikzpicture}[var/.style={draw=nccblue,fill=nccorange,text=white,minimum height=2pt,inner sep=2pt,outer sep=2pt},data/.style={draw=nccblue,fill=white,text=nccblue,inner sep=2pt,outer sep=2pt}]
                    \node (s1) [var] {\textcolor{nccorange}{X}\textcolor{nccblue}{\raisebox{0.25ex}{$\bullet$}}\textcolor{nccorange}{X}};
                    \node (hw) [data,right = 1cm of s1] {Hello world!};
                    \node [above = 2mm of s1] {s1};

                    \path [->,draw,thick,nccblue] (s1.center) -- (hw);
                \end{tikzpicture}
            \end{center}
            \caption{\mintinline{java}{String s1 = new String( "Hello world!" );}}
        \end{subfigure}
    \end{center}
    \caption{How Integers and Strings Are Stored in Memory}
    \label{fig:reference-variable}
\end{figure}

The actual string is stored some place in memory away from the variable \mintinline{java}{s1}, and what \mintinline{java}{s1} stores is the numeric location of this place in memory.  We say that \mintinline{java}{s1} is a \textbf{reference variable} because it contains a \textit{reference} to the string ``Hello world!''.

\begin{defn}{Reference Variable}
    A \textbf{reference variable}\index{Reference Variable} is a variable that stores a \textit{reference} to, or the memory address of, a piece of data stored somewhere else in memory.
\end{defn}
