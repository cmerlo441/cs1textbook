% !TEX root = /Users/cmerlo//cs1textbook/cs1textbook.tex

\chapter{Simple Selection}
\label{chapter:if}

\minitoc

Now that we know how to store numbers in a Java program, it's important to learn how to ask a program to make decisions for us.

\section{True and False Values}
Numbers are not the only things we need to store in memory.  It is important to be able to represent the values \mintinline{java}{true} and \mintinline{java}{false} also, and the \mintinline{java}{boolean} data type does this for us.

A \mintinline{java}{boolean}\index{Primitive Data Types!boolean@\mintinline{java}{boolean}} variable can store either true or false, as seen here:

\begin{minted}{java}
boolean b1 = true;
boolean b2 = false;
\end{minted}

A \mintinline{java}{boolean} variable can also store the results of a \textit{boolean expression}, using \textit{relational operators}, as seen in this example:

\begin{minted}{java}
int i1 = 15;
int i2 = 12;
boolean b1 = i1 > i2;   // b1 stores true
boolean b2 = i1 < i2;   // b2 stores false
\end{minted}

\begin{defn}{Boolean Expression}
A \textbf{boolean expression} is an expression that can be either true or false.
\end{defn}

Your computer keyboard likely does not have a key with $\ge$ or $\le$ symbols on it, and so these operators are made up of two symbols each: \mintinline{java}{>=} is the ``greater than or equal'' symbol in Java, and \mintinline{java}{<=} is the ``less than or equal'' symbol.  Such a symbol, made up of two keystrokes, is called a \textit{digraph}, from the Greek roots for ``two'' and ``writing''.

Notice that the single equal sign \mintinline{java}{=}, which is used in assignment statements in Java, is not a relational operator.  The operator that tests for equality is a digraph composed of two equal signs: \mintinline{java}{==}.

\begin{minted}{java}
int i1 = 6;
int i2 = 6;
int i3 = 11;
boolean b1 = i1 == i3;   // b1 stores false
boolean b2 = i1 == i2;   // b2 stores true;
\end{minted}

You might find those last two expressions difficult to read; some programmers choose to add parentheses \textit{just for readability} in a case like this:

\begin{minted}[firstnumber=5]{java}
boolean b2 = ( i1 == i2 );
\end{minted}

\section{Simple Selection Statements}
\label{section:simple-selection}
As stated before, we can have our Java programs make decisions for us, by writing what some textbook authors call a \textit{selection statement}, and what other textbook authors call a \textit{conditional statement}, but what most programmers call an \textit{if statement} due to the required keyword.

\begin{javaformat}{Simple Selection,label=format:selection}
\begin{minted}{java}
if( <boolean-expression> )
    <statement>
\end{minted}
\end{javaformat}

The statement on the second line is \textit{indented} so that it's obvious that it's part of a larger structure.  That statement will only be performed if the boolean expression right before it is true.  At the end of this example, \mintinline{java}{x} will have the value 15, and \mintinline{java}{y} will have the value 6:

\begin{minted}{java}
int x = 12;
int y = 6;

if( x < y )
    y = 10;
if( x > y )
    x = 15;
\end{minted}

Note that line 6 of that example will run even though \mintinline{java}{x < y} is false, because the first selection statement ends at the end of line 5.  The \mintinline{java}{<statement>} in Java Format \ref{format:selection} is just that: a single statement.

Watch out for mistakes like this:
\begin{trap}{Indentation}\label{trap:selection}
\begin{minted}{java}
int x = 100;
int y = 1;
int z = 1;

if( x < 10 )
    y = 5;
    z = 5;      // Uh oh!
\end{minted}
\end{trap}

In this trap, the value of \mintinline{java}{y} will not be changed to 5 because the condition is false, but then the value of \mintinline{java}{z} \textit{will} be changed to 5, because the conditional statement already ended.  We use indentation to make it easy to recognize the structure of our code, but when the computer turns our source code into a program, it \textit{completely ignores} our indentation.  Whether the line that contains \mintinline{java}{z = 5} in Trap \ref{trap:selection} is indented or not \textit{does not change} how the computer interprets the code.

In order to run multiple statements when a condition is true, we must write a \textit{compound statement}, also called a \textit{block}.

\begin{defn}{Compound Statement}
A \textbf{compound statement}, also called a \textbf{block}, is a group of statements surrounded by curly braces.  The statements within a block should be indented for readability.
\end{defn}

The following code will change neither \mintinline{java}{y} nor \mintinline{java}{z} to 5, because both of those assignment statements are part of the compound statement that follows the condition:

\begin{minted}{java}
int x = 100;
int y = 1;
int z = 1;

if( x < 10 ) {
    // None of the code in this block will be executed
    y = 5;
    z = 5;
}
\end{minted}

The following trap also doesn't do what one might think after a quick glance:

\begin{trap}{Semicolon}
\label{trap:semicolon}
\begin{minted}{java}
int x = 100;
int y = 1;

if( x < 10 );
    y = 5;
\end{minted}
\end{trap}

Even though the condition in this trap is false, the value of \mintinline{java}{y} \textit{will be changed} to 5.  The trap here is that the semicolon after the condition counts as a statement, and so the statement \mintinline{java}{y = 5;}, while indented, exists \textit{after} the selection statement, and therefore will always be executed regardless of the condition.  It's easy to get accustomed to typing a semicolon every time you're about to hit the Enter key, but this is one scenario in which you should definitely not do so.

\begin{tip}{Automatic Indentation Tip}
Use a text editor that can automatically indent your code for you.  In emacs, you just have to enable the Java editing mode; you can use Control-I in Eclipse (Command-I on a Mac) to correct indentation.  If the code from Trap \ref{trap:semicolon} were automatically indented, it would look like this, which ought to help alert you to the bug:

\begin{minted}{java}
int x = 100;
int y = 1;

if( x < 10 );
y = 5;          // Not indented any more, because the if statement ended!
\end{minted}
\end{tip}

\section{Simple If-Else Statements}
\label{section:ifelse}
In Section \ref{section:simple-selection}, we saw code that examined a condition and ran some code only if the condition was true.  Sometimes, however, we need to react to a condition being false also.  In this case, we can write an \textit{if-else statement}:

\begin{javaformat}{Simple If-Else Statement}
\begin{minted}[escapeinside=||,mathescape=true]{java}
if( <boolean-expression> )
    <statement|$_\mathrm{T}$|>
else
    <statement|$_\mathrm{F}$|>
\end{minted}
\end{javaformat}

In this conditional, \texttt{<statement$_\mathrm{T}$>} will only run if the \texttt{<boolean-expression>} is true, and \texttt{<statement$_\mathrm{F}$>} will only run if the \texttt{<boolean-expression>} is false.  One or the other of those statements will definitely be executed, but which one depends on the condition.

Going back to our party guests scenario, perhaps our party will be hosted in the sort of location that charges \$3.99 per guest, but also assesses a minimum fee if the number of attendees doesn't meet a certain threshold:

\begin{minted}{java}
int numberOfGuests = 15;
double fee;

if( numberOfGuests <= 10 )
    fee = 39.99;
else
    fee = 39.99 + ( ( numberOfGuests - 10 ) * 3.99 );
\end{minted}

More interesting uses of conditional statements will be explored in Chapter \ref{chapter:complex-selection}.
